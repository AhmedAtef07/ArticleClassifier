asking
help
sticky
problem
involving
unreasonably
low
apparent
precision
buffering
encountered
different
pex
implementations
find
discussion
problem
resources
lay
hands
comp
windows
pex
faq
gaskins
_pexlib_programming_manual_
vendors
documentation
problem
solved
eliminate
minimize
stitching
artifacts
resulting
use
buffering
polylines
coplanar
filled
areas
interpolated
values
along
line
differ
slightly
due
roundoff
error
interpolated
values
area
endpoints
line
coincident
vertices
area
tossup
whether
buffer
allow
line
pixels
area
pixels
displayed
visually
result
tends
dashed
line
effect
though
line
supposed
solid
using
pexlib
api
approach
solution
use
slightly
different
pex
view
mapping
transforms
view
table
entries
areas
pex
structures
immediate
mode
output
organized
view
table
index
always
effect
areas
always
effect
result
slight
shift
npc
coordinates
attempt
bias
tossup
situations
favor
shift
effected
moving
front
back
clipping
planes
used
pexlib
view
table
entry
hair
backwards
smaller
vrc
coordinates
compared
positions
view
table
entry
used
areas
means
point
transformed
npc
value
slightly
bigger
comes
line
comes
area
thus
accomplishing
desired
bias
expect
roundoff
errors
cause
problem
amount
few
units
entire
dynamic
range
buffer
typically
bit
buffers
therefore
seems
tiny
fraction
range
vrc
between
front
back
clip
planes
ought
suffice
reliably
fix
stitching
fact
experience
shows
shift
range
empirically
worst
npc
component
slope
surface
high
appears
less
edge
viewer
bits
buffer
dependable
meaning
amount
great
problem
replaced
another
sometimes
polylines
show
through
areas
supposed
lie
behind
observed
problem
both
hewlett
packard
digital
workstation
pex
servers
approximately
same
degree
test
program
demonstrates
problem
mit
pexlib
implementation
version
known
compile
run
system
pex
open
questions
happen
configuring
pex
view
table
wrongly
systematic
difference
interpolation
opposed
areas
pixel
centers
versus
corners
corrected
pex
implementors
wantonly
discarding
precision
interpolators
something
fix
use
view
table
allow
better
precision
buffered
hlhsr
another
approach
take
remove
stitching
artifacts
luck
here
ibm
same
problem
workstations
shocked
first
realized
offset
fills
bits
assuming
bit
buffer
seems
huge
dynamic
range
those
terms
doesn
seem
bad
happening
interpolation
totally
linear
due
mainly
roundoff
believe
polygon
planar
ruffles
potato
chip
ditto
start
end
different
values
ridges
phase
resulting
stitch
effect
same
problem
try
draw
polygon
right
top
another
different
vertices
see
smeared
effect
overlap
example
try
polygon
polygon
implementation
correct
fact
similar
trick
rendering
primitives
polygons
nurbs
surfaces
isoparametric
without
trick
appear
stitched
application
draws
polygons
independently
system
smarts
automatically
shifting
application
discovered
doing
bravo
note
ibm
ers
information
given
here
previously
disclosed
through
proper
channels
giving
away
new
unpublished
info
mark
einkauf
einkauf
austin
ibm
ibm
advanced
workstations
systems
graphics
systems
austin
views
opinions
expressed
herein
necessarily
those
ibm
corp
